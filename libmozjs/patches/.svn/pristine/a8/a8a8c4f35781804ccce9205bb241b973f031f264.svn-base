--- a/js/src/jsapi.cpp
+++ b/js/src/jsapi.cpp
@@ -6184,3 +6184,36 @@
 }
 
 #endif
+
+#ifdef JS_STRING_OPERATION_CALLBACK
+//----------------------------------------------------------
+//          Start of Finjan patch
+//----------------------------------------------------------
+JS_PUBLIC_API(JSStringOperationCallback)
+JS_SetStringOperationCallback(JSContext *cx, JSStringOperationCallback callback)
+{
+    if ( !cx )
+    {
+        return NULL;
+    }
+#ifdef JS_THREADSAFE
+    JS_ASSERT(CURRENT_THREAD_IS_ME(cx->thread));
+#endif
+    JSStringOperationCallback old = cx->stringOpCallback;
+    cx->stringOpCallback = callback;
+    return old;
+}
+
+JS_PUBLIC_API(JSStringOperationCallback)
+JS_GetStringOperationCallback(JSContext *cx)
+{
+    if ( !cx )
+    {
+        return NULL;
+    }
+    return cx->stringOpCallback;
+}
+#endif
+//----------------------------------------------------------
+// End of Finjan patch
+
--- a/js/src/jsapi.h
+++ b/js/src/jsapi.h
@@ -2925,6 +2925,15 @@
 extern JS_PUBLIC_API(void)
 JS_TriggerAllOperationCallbacks(JSRuntime *rt);
 
+#ifdef JS_STRING_OPERATION_CALLBACK
+extern JS_PUBLIC_API(JSStringOperationCallback)
+JS_SetStringOperationCallback(JSContext *cx, JSStringOperationCallback callback);
+
+extern JS_PUBLIC_API(JSStringOperationCallback)
+JS_GetStringOperationCallback(JSContext *cx);
+#endif
+
+
 extern JS_PUBLIC_API(JSBool)
 JS_IsRunning(JSContext *cx);
 
--- a/js/src/jsatom.cpp
+++ b/js/src/jsatom.cpp
@@ -541,6 +541,17 @@
     AddAtomEntryFlags(*p, flags & (ATOM_PINNED | ATOM_INTERNED));
 
     JSAtom *atom = STRING_TO_ATOM(key);
+#ifdef JS_STRING_OPERATION_CALLBACK
+    if ( cx->stringOpCallback )
+    {
+      JSStringOperation op = JS_STR_OP_CONSTRUCT;
+      if ( (cx->stringOpCallback) (cx, op, key, NULL) == JS_FALSE )
+      {
+       // JS_ReportOutOfMemory(cx);
+        return NULL;
+      }
+    }
+#endif
     return atom;
 }
 
--- a/js/src/jscntxt.cpp
+++ b/js/src/jscntxt.cpp
@@ -742,6 +742,9 @@
 #if JS_STACK_GROWTH_DIRECTION > 0
     cx->stackLimit = (jsuword) -1;
 #endif
+#ifdef JS_STRING_OPERATION_CALLBACK
+    cx->stringOpCallback = NULL;
+#endif
     cx->scriptStackQuota = JS_DEFAULT_SCRIPT_STACK_QUOTA;
     JS_STATIC_ASSERT(JSVERSION_DEFAULT == 0);
     JS_ASSERT(cx->findVersion() == JSVERSION_DEFAULT);
--- a/js/src/jscntxt.h
+++ b/js/src/jscntxt.h
@@ -1727,6 +1727,11 @@
 
     /* Branch callback. */
     JSOperationCallback operationCallback;
+    
+#ifdef JS_STRING_OPERATION_CALLBACK
+    /* String operation callback - 1st goal is shellcode detection. */
+    JSStringOperationCallback stringOpCallback;
+#endif
 
     /* Interpreter activation count. */
     uintN               interpLevel;
--- a/js/src/jspubtd.h
+++ b/js/src/jspubtd.h
@@ -466,6 +466,22 @@
 typedef JSBool
 (* JSOperationCallback)(JSContext *cx);
 
+#ifdef JS_STRING_OPERATION_CALLBACK
+typedef enum JSStringOperation {
+    JS_STR_OP_CONSTRUCT,
+    JS_STR_OP_JSSTRING,
+    JS_STR_OP_TOSTRING,
+    JS_STR_OP_CONCAT_BEFORE,
+    JS_STR_OP_CONCAT_AFTER,
+    JS_STR_OP_ESCAPE,
+    JS_STR_OP_ESCAPED,
+    JS_STR_OP_UNESCAPE,
+    JS_STR_OP_UNESCAPED
+} JSStringOperation;
+typedef JSBool
+(* JSStringOperationCallback)(JSContext *cx, JSStringOperation op, JSString *left, JSString *right);
+#endif
+
 typedef void
 (* JSErrorReporter)(JSContext *cx, const char *message, JSErrorReport *report);
 
--- a/js/src/jsstr.cpp
+++ b/js/src/jsstr.cpp
@@ -256,6 +256,17 @@
     if (rightLen == 0)
         return left;
 
+#ifdef JS_STRING_OPERATION_CALLBACK
+    if ( cx->stringOpCallback )
+    {
+       JSStringOperation op = JS_STR_OP_CONCAT_BEFORE;
+       if ( (cx->stringOpCallback) (cx, op, left, right) == JS_FALSE )
+       {
+          return left;
+       }
+    }
+#endif
+
     size_t wholeLength = leftLen + rightLen;
 
     if (JSShortString::fitsIntoShortString(wholeLength)) {
@@ -273,6 +284,16 @@
         js_short_strncpy(buf, leftChars, leftLen);
         js_short_strncpy(buf + leftLen, rightChars, rightLen);
         buf[wholeLength] = 0;
+#ifdef JS_STRING_OPERATION_CALLBACK
+        if ( shortStr && shortStr->header() && cx->stringOpCallback )
+        {
+          JSStringOperation op = JS_STR_OP_CONCAT_AFTER;
+          if ( (cx->stringOpCallback) (cx, op, shortStr->header(), NULL) == JS_FALSE )
+          {
+            return left;
+          }
+        }
+#endif
         return shortStr->header();
     }
 
@@ -291,6 +312,16 @@
         return NULL;
 
     newRoot->initRopeNode(left, right, wholeLength);
+#ifdef JS_STRING_OPERATION_CALLBACK
+    if ( newRoot && cx->stringOpCallback )
+    {
+      JSStringOperation op = JS_STR_OP_CONCAT_AFTER;
+      if ( (cx->stringOpCallback) (cx, op, newRoot, NULL) == JS_FALSE )
+      {
+        return left;
+      }
+    }
+#endif
     return newRoot;
 }
 
@@ -462,6 +493,18 @@
     if (!str)
         return JS_FALSE;
 
+#ifdef JS_STRING_OPERATION_CALLBACK
+    if ( cx->stringOpCallback )
+    {
+      JSStringOperation op = JS_STR_OP_ESCAPE;
+      if ( (cx->stringOpCallback) (cx, op, str, NULL) == JS_FALSE )
+      {
+        return JS_FALSE;
+      }
+    }
+#endif
+
+
     size_t length = str->length();
     const jschar *chars = str->chars();
 
@@ -528,6 +571,17 @@
         return JS_FALSE;
     }
     rval->setString(retstr);
+#ifdef JS_STRING_OPERATION_CALLBACK
+    if ( cx->stringOpCallback )
+    {
+      JSStringOperation op = JS_STR_OP_ESCAPED;
+      if ( (cx->stringOpCallback) (cx, op, retstr, NULL) == JS_FALSE )
+      {
+        return JS_FALSE;
+      }
+    }
+#endif
+
     return JS_TRUE;
 }
 #undef IS_OK
@@ -549,6 +603,16 @@
     size_t length = str->length();
     const jschar *chars = str->chars();
 
+#ifdef JS_STRING_OPERATION_CALLBACK
+    if ( cx->stringOpCallback )
+    {
+      JSStringOperation op = JS_STR_OP_UNESCAPE;
+      if ( (cx->stringOpCallback) (cx, op, str, NULL) == JS_FALSE )
+      {
+        return JS_FALSE;
+      }
+    }
+#endif
     /* Don't bother allocating less space for the new string. */
     jschar *newchars = (jschar *) cx->malloc((length + 1) * sizeof(jschar));
     if (!newchars)
@@ -583,6 +647,16 @@
         return JS_FALSE;
     }
     vp->setString(retstr);
+#ifdef JS_STRING_OPERATION_CALLBACK
+    if ( cx->stringOpCallback )
+    {
+      JSStringOperation op = JS_STR_OP_UNESCAPED;
+      if ( (cx->stringOpCallback) (cx, op, retstr, NULL) == JS_FALSE )
+      {
+        return JS_FALSE;
+      }
+    }
+#endif
     return JS_TRUE;
 }
 
@@ -815,10 +889,20 @@
 JSBool
 js_str_toString(JSContext *cx, uintN argc, Value *vp)
 {
-    JSString *str;
+    JSString *str=NULL;
     if (!GetPrimitiveThis(cx, vp, &str))
         return false;
     vp->setString(str);
+#ifdef JS_STRING_OPERATION_CALLBACK
+    if ( str && cx->stringOpCallback )
+    {
+      JSStringOperation op = JS_STR_OP_TOSTRING;
+      if ( (cx->stringOpCallback) (cx, op, str, NULL) == JS_FALSE )
+      {
+        return JS_FALSE;
+      }
+    }
+#endif
     return true;
 }
 
@@ -3296,7 +3380,7 @@
 {
     Value *argv = vp + 2;
 
-    JSString *str;
+    JSString *str=NULL;
     if (argc > 0) {
         str = js_ValueToString(cx, argv[0]);
         if (!str)
@@ -3314,6 +3398,16 @@
     } else {
         vp->setString(str);
     }
+#ifdef JS_STRING_OPERATION_CALLBACK
+    if ( cx->stringOpCallback )
+    {
+      JSStringOperation op = JS_STR_OP_JSSTRING;
+      if ( (cx->stringOpCallback) (cx, op, str, NULL) == JS_FALSE )
+      {
+        return JS_FALSE;
+      }
+    }
+#endif
     return true;
 }
 
